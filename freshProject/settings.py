# coding:utf-8
"""
Django settings for freshProject project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print("[BASE_DIR] : %s"%BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f2jq$_wfcpvhqnz(whkf(r457%2i3o-^0!bn#%84v3!)9!2#0^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'df_user',
    'df_goods',
    'tinymce', # 富文本编辑器
    'df_cart',
    'df_order',
    # 'haystack', # 属于一种全文检索的框架，为支持whoosh等所搜引擎。
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'freshProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'freshProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get("DB_NAME", "dailyfresh"),  # 所使用数据库的名字！
        'USER': os.environ.get("DB_USER", 'root'),  # 超级管理员的登陆，也可选择自己的账户登陆
        'PASSWORD': os.environ.get("DB_PASSWORD", '123456'),  # 各自的密码别记混了
        'HOST': os.environ.get("DB_HOST", 'mysql'),
        # 'HOST': os.environ.get("DB_HOST", '0.0.0.0'),
        'PORT': os.environ.get("DB_NAME", '3306'),
        # 'PORT': os.environ.get("DB_NAME", '4445'),
        'OPTIONS': {'charset': 'utf8mb4'}  # 避免mysql的utf8的bug，以及表情等特殊字符
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static'),    #主文件下静态文件
]

# 上传文件的存储路径，这是开发阶段要用的。
MEDIA_ROOT=os.path.join(BASE_DIR,"static/media")

# 添加部署时的静态文件的存储目录.等项目创建完成后，把静态文件收集到对应目录。
# STATIC_ROOT='/var/www/dailyfresh/static/'

# 富文本编辑器
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 600,
    'height': 400,
}

# 全文检索，搜索引擎
HAYSTACK_CONNECTIONS = {
    'default': {
        # 'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',   # todo 这里需要更改底层whoosh代码，确认下docker内怎么实现
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
#自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'



